'use server';

/**
 * @fileOverview Flow for detecting email spoofing and other vulnerabilities based on DNS configuration.
 *
 * - detectVulnerabilities - A function that handles the vulnerability detection process.
 * - VulnerabilityDetectionInput - The input type for the detectVulnerabilities function.
 * - VulnerabilityDetectionOutput - The return type for the detectVulnerabilities function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VulnerabilityDetectionInputSchema = z.object({
  spfRecord: z.string().optional().describe('The SPF record for the domain.'),
  dkimRecord: z.string().optional().describe('The DKIM record for the domain.'),
  dmarcRecord: z.string().optional().describe('The DMARC record for the domain.'),
});
export type VulnerabilityDetectionInput = z.infer<typeof VulnerabilityDetectionInputSchema>;

const VulnerabilityDetectionOutputSchema = z.object({
  vulnerabilities: z.array(
    z.string().describe('A list of potential email spoofing and other vulnerabilities.')
  ).
describe('A list of potential email spoofing and other vulnerabilities detected in the DNS configuration.'),
});
export type VulnerabilityDetectionOutput = z.infer<typeof VulnerabilityDetectionOutputSchema>;

export async function detectVulnerabilities(input: VulnerabilityDetectionInput): Promise<VulnerabilityDetectionOutput> {
  return detectVulnerabilitiesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'vulnerabilityDetectionPrompt',
  input: {schema: VulnerabilityDetectionInputSchema},
  output: {schema: VulnerabilityDetectionOutputSchema},
  prompt: `You are an expert in email security. Analyze the provided SPF, DKIM, and DMARC records to identify potential vulnerabilities related to email spoofing and other email security risks.

  Provide a list of vulnerabilities. Be concise and specific.

  Here are the DNS records:

  SPF Record: {{{spfRecord}}}
  DKIM Record: {{{dkimRecord}}}
  DMARC Record: {{{dmarcRecord}}}`,
});

const detectVulnerabilitiesFlow = ai.defineFlow(
  {
    name: 'detectVulnerabilitiesFlow',
    inputSchema: VulnerabilityDetectionInputSchema,
    outputSchema: VulnerabilityDetectionOutputSchema,
  },
  async input => {
    const {output} = await prompt({
      spfRecord: input.spfRecord || undefined,
      dkimRecord: input.dkimRecord || undefined,
      dmarcRecord: input.dmarcRecord || undefined,
    });
    return output!;
  }
);
